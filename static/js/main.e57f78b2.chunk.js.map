{"version":3,"sources":["services/StorageService.js","config/index.js","services/WeatherService.js","store/types.js","store/actions/locationActions.js","components/layout/NavBar/NavBar.js","components/ToggleUnit/ToggleUnit.js","store/actions/weatherActions.js","components/layout/AppHeader/AppHeader.js","containers/LocationSearch/components/SuggestsList/SuggestsList.js","containers/LocationSearch/LocationSearch.js","services/UtilService.js","containers/LocationDetails/components/DayForecast/DayForecast.js","containers/LocationDetails/components/WeekForecast/WeekForecast.js","components/util/ToggleHeart/ToggleHeart.js","containers/LocationDetails/LocationDetails.js","pages/HomePage/HomePage.js","containers/FavoritesContainer/components/LocationPreview/LocationPreview.js","containers/FavoritesContainer/components/LocationList/LocationList.js","containers/FavoritesContainer/FavoritesContainer.js","pages/FavoritesPage/FavoritesPage.js","App.js","store/reducers/locationReducer.js","store/reducers/weatherReducer.js","store/reducers/rootReducer.js","index.js"],"names":["store","key","any","localStorage","JSON","stringify","load","str","parse","process","site_url","BASE_URL","API_KEY","FAVORITE_LOCATIONS_STORAGE_KEY","queryString","a","url","axios","get","res","data","locationKey","DailyForecasts","getLocationSuggests","getLocationCurrentWeatherByKey","getLocationweekForecastByKey","getFavoriteLocations","StorageService","saveFavoriteLocations","locationDetails","getWeatherIconSrc","iconNumber","icon_folder_url","config","convertCelsiusToFahrenheit","degrees","Math","floor","SET_LOCATION_SUGGESTS","SET_SELECTED_LOCATION","SET_FAVORITE_LOCATIONS","TOGGLE_TEMPERATURE_UNIT","setSelectedLocationAction","dispatch","type","payload","NavBar","className","exact","to","connect","state","temperatureUnit","weatherReducer","unit","toggleTemperatureUnit","onClick","AppHeader","SuggestsList","suggestions","onSuggestClick","suggestionsToDisplay","map","s","Key","bind","LocalizedName","Country","LocationSearch","isFocus","term","setSelectedLocation","location","setState","props","onFocus","onBlur","setTimeout","onInputChange","ev","target","value","fetchLocationSuggests","this","onChange","placeholder","React","Component","locationReducer","locationSuggests","WeatherService","getDayInWeekByDate","date","Date","getDay","getFormattedHour","dateStr","localOffset","now","getTimezoneOffset","utcTimestamp","cityOffset","slice","getHours","getMinutes","dayForecast","dayInWeek","UtilService","celsiusDegrees","Temperature","Minimum","Value","temperature","weatherIconSrc","Day","Icon","src","WeekForecast","weekForecastToDisplay","weekForecast","EpochDate","ToggleHeart","isChecked","styleObj","color","style","LocationDetails","currentWeather","fetchCurrentWeather","selectedLocation","fetchWeekForecast","toggleLocationFromFavorites","prevProps","prevState","weatherText","hour","partOfDay","timeContainerStyle","windSpeed","favorites","locationName","isOnFavorites","find","Metric","Imperial","WeatherText","WeatherIcon","LocalObservationDateTime","IsDayTime","backgroundColor","Wind","Speed","getState","favoritesCopy","idx","findIndex","_location","splice","push","toggleLocationFromFavoritesAction","HomePage","LocationPreview","handleClick","onLocationClick","LocationList","locations","locationListToDisplay","length","FavoritesContainer","handleLocationClick","history","favoriteLocationsToDisplay","withRouter","FavoritesPage","fetchFavoriteLocations","favoriteLocations","useEffect","path","component","initState","action","rootReducer","combineReducers","createStore","applyMiddleware","thunk","subscribe","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e57f78b2.chunk.js","sourcesContent":["function store(key, any) {\n   localStorage[key] = JSON.stringify(any);\n}\n\nfunction load(key) {\n      var str = localStorage[key] || 'null';\n      let value = JSON.parse(str);\n      return value\n}\n\nexport default {\n   store,\n   load\n}\n","const prod = {\n   site_url: 'https://benpinchas.github.io/Ben-Pinchas-28-11-2019'\n};\nconst dev = {\n   site_url: 'http://localhost:3000'\n};\nexport default process.env.NODE_ENV === 'development' ? dev : prod;","import axios from 'axios'\nimport StorageService from './StorageService'\nimport * as FakeResponse from './FakeResponse'\nimport config from '../config'\n\nconst BASE_URL = 'https://dataservice.accuweather.com'\nconst API_KEY = 'zsGlW5LWHSfncy9Loq7xgypCDO1ShYbS'\nconst FAVORITE_LOCATIONS_STORAGE_KEY = 'FAVORITE_LOCATIONS'\n\n\nfunction getFavoriteLocations() {\n  return StorageService.load(FAVORITE_LOCATIONS_STORAGE_KEY)\n}\n\nfunction saveFavoriteLocations(locationDetails) {\n  return StorageService.store(FAVORITE_LOCATIONS_STORAGE_KEY, locationDetails)\n}\n\n//FIX\nasync function getLocationSuggests(queryString) {\n  // return FakeResponse.locationSuggests\n  const url = BASE_URL + '/locations/v1/cities/autocomplete?apikey=' + API_KEY + '&q=' + queryString\n  try {\n    const res = await axios.get(url)\n    return res.data\n  } catch (err) {\n    throw err\n  }\n}\n\n\n//FIX\nasync function getLocationCurrentWeatherByKey(locationKey) {\n  // return FakeResponse.currWeatherLong\n  const url = BASE_URL + '/currentconditions/v1/' + locationKey + '?apikey=' + API_KEY + '&details=true'\n  try {\n    const res = await axios.get(url)\n    return res.data[0]\n  } catch (err) {\n    throw err\n  }\n\n}\n\n//FIX\nasync function getLocationweekForecastByKey(locationKey) {\n  // return await FakeResponse.weekForecast\n  const url = BASE_URL + '/forecasts/v1/daily/5day/' + locationKey + '?apikey=' + API_KEY + '&metric=true'\n  try {\n    const res = await axios.get(url)\n    return res.data.DailyForecasts\n   \n  } catch (err) {\n    throw err\n  }\n}\n\n\nfunction convertCelsiusToFahrenheit(degrees) {\n  return Math.floor(degrees * 1.8 + 32)\n}\n\nfunction getWeatherIconSrc(iconNumber) {\n  const site_url = config.site_url\n  const icon_folder_url = site_url + '/assets/weather-icons/'\n  if (iconNumber === 1) {\n    //sun\n    return icon_folder_url + 'sun.svg'\n  } else if (iconNumber >= 2 && iconNumber <= 4) {\n    // strong sun , few clouds\n    return icon_folder_url + 'sunny.svg'\n  } else if (iconNumber >= 6 && iconNumber <= 8) {\n    // heavy clouds, little sun\n    return icon_folder_url + 'cloudy.svg'\n  } else if (iconNumber === 11) {\n    //fog\n    return icon_folder_url + 'fog.svg'\n  } else if (iconNumber >= 12 && iconNumber <= 18) {\n    //rain\n    return icon_folder_url + 'rain.svg'\n  } else if (iconNumber === 22) {\n    //snow\n    return icon_folder_url + 'snow.svg'\n  } else if (iconNumber >= 19 && iconNumber <= 23) {\n    //cloud\n    return icon_folder_url + 'clouds.svg'\n  } else if (iconNumber >= 38 && iconNumber <= 42) {\n    // storm\n    return icon_folder_url + 'storm.svg'\n  } else {\n    // general\n    return icon_folder_url + 'general.svg'\n  }\n}\n\n\nexport default {\n  getLocationSuggests,\n  getLocationCurrentWeatherByKey,\n  getLocationweekForecastByKey,\n  getFavoriteLocations,\n  saveFavoriteLocations,\n  getWeatherIconSrc,\n  convertCelsiusToFahrenheit\n}\n\n\n\n","export const SET_LOCATION_SUGGESTS = 'SET_LOCATION_SUGGESTS'\nexport const SET_SELECTED_LOCATION = 'SET_SELECTED_LOCATION_DETAILS'\nexport const SET_FAVORITE_LOCATIONS = 'SET_FAVORITE_LOCATIONS'\n\nexport const TOGGLE_TEMPERATURE_UNIT = 'TOGGLE_TEMPERATURE_UNIT'","//serivces\nimport WeatherService from '../../services/WeatherService'\n//types\nimport {\n   SET_LOCATION_SUGGESTS,\n   SET_SELECTED_LOCATION,\n   SET_FAVORITE_LOCATIONS\n} from '../types'\n\nexport function fetchLocationSuggestsAction(queryString) {\n   return async (dispatch) => {\n      let suggestions = await WeatherService.getLocationSuggests(queryString)\n      dispatch({ type: SET_LOCATION_SUGGESTS, payload: suggestions })\n   }\n}\n\n\nexport function setSelectedLocationAction(locationDetails) {\n   return async (dispatch) => {\n      dispatch({ type: SET_SELECTED_LOCATION, payload: locationDetails })\n   }\n}\n\nexport function fetchFavoriteLocationsAction() {\n   return async (dispatch, getState) => {\n      if (!getState().locationReducer.favorites.length) {\n         const favoriteLocations = await WeatherService.getFavoriteLocations()\n         dispatch({ type: SET_FAVORITE_LOCATIONS, payload: favoriteLocations })\n      }\n   }\n}\n\nexport function toggleLocationFromFavoritesAction(location) {\n   return  (dispatch, getState) => {\n      const favoritesCopy = getState().locationReducer.favorites.slice()\n      const idx = favoritesCopy.findIndex(_location => _location.Key === location.Key)\n      if (idx !== -1) {\n         favoritesCopy.splice(idx, 1)\n      }else {\n         favoritesCopy.push(location)\n      }\n      dispatch({ type: SET_FAVORITE_LOCATIONS, payload: favoritesCopy })\n      WeatherService.saveFavoriteLocations(favoritesCopy)\n   }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import React from 'react';\nimport './style.scss'\nimport { NavLink } from 'react-router-dom'\nconst NavBar = () => {\n   return (\n      <nav className=\"nav-bar-cmp\">\n         <NavLink exact to=\"/\">Home</NavLink>\n         <NavLink to=\"/favorites\">Favorties</NavLink>\n      </nav>\n   );\n}\nexport default NavBar;","import React from 'react';\nimport './style.scss' \n//store\nimport {connect} from 'react-redux'\nimport { toggleTemperatureUnitAction } from '../../store/actions/weatherActions';\n\nconst ToggleUnit = ({temperatureUnit, toggleTemperatureUnit}) => {\n\nreturn (\n <div className=\"toggle-unit-cmp\" onClick={toggleTemperatureUnit}> \n    <button className={temperatureUnit === 'C'?'active' : ''}>° C</button> \n    <span> | </span>\n    <button className={temperatureUnit !== 'C'?'active' : ''}>° F</button>\n </div>\n );\n}\n\nconst mapStateToProps = (state) => {\n   return {\n      temperatureUnit: state.weatherReducer.unit\n   }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n   return {\n      toggleTemperatureUnit: () => dispatch(toggleTemperatureUnitAction())\n   }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ToggleUnit);","import {TOGGLE_TEMPERATURE_UNIT} from '../types'\n\nexport function toggleTemperatureUnitAction() {\n   return {type: TOGGLE_TEMPERATURE_UNIT, payload: null}\n}","import React from 'react';\nimport './style.scss'\nimport NavBar from '../NavBar/NavBar';\nimport ToogleUnit from '../../ToggleUnit/ToggleUnit'\n\nconst AppHeader = () => {\n   return (\n      <header className=\"app-header-cmp\">\n         <div className=\"container\">\n            <div className=\"widget-container\">\n               <ToogleUnit />\n            </div>\n            <div className=\"main\">\n               <h2>Weather App</h2>\n               <NavBar />\n            </div>\n\n         </div>\n      </header>\n   );\n}\n\nexport default AppHeader;","import React from 'react';\nimport './style.scss'\nconst SuggestsList = ({ suggestions, onSuggestClick }) => {\n   const suggestionsToDisplay = suggestions.map(s => {\n      return (\n         <li\n            className=\"suggest-preview\"\n            key={s.Key}\n            onClick={onSuggestClick.bind(null, s)}>\n            <span>{s.LocalizedName}</span> <span className=\"country\">{s.Country.LocalizedName}</span>\n         </li>\n      )\n   })\n   return (\n      <ul className=\"suggests-list-cmp\">\n         {suggestionsToDisplay}\n      </ul>\n   );\n}\nexport default SuggestsList;","import React from 'react';\nimport './style.scss'\n//store\nimport { connect } from 'react-redux'\nimport { setSelectedLocationAction, fetchLocationSuggestsAction } from '../../store/actions/locationActions'\n//cmps\nimport SuggestionsList from './components/SuggestsList/SuggestsList';\n\nclass LocationSearch extends React.Component {\n   state = {\n      isFocus: false,\n      term: ''\n   }\n\n   setSelectedLocation = (location) => {\n      this.setState({ term: location.LocalizedName })\n      this.props.setSelectedLocation(location)\n   }\n\n   onFocus = () => {\n      this.setState({ isFocus: true })\n   }\n\n   onBlur = () => {\n      setTimeout(() => //FIX\n         this.setState({ ...this.state, isFocus: false })\n         , 100)\n\n   }\n\n   onInputChange = (ev) => {\n      const term = ev.target.value\n      this.setState(\n         (state) => ({ ...state, term: term }),\n         () => this.props.fetchLocationSuggests(term)\n      )\n   }\n\n   render() {\n      const { suggestions } = this.props\n      const { isFocus } = this.state\n      return (\n         <div className=\"location-search-cmp\">\n            <input\n               type=\"text\"\n               onChange={this.onInputChange}\n               value={this.state.term}\n               onFocus={this.onFocus}\n               onBlur={this.onBlur}\n               placeholder=\"Search for a place..\" />\n            {\n               isFocus && suggestions &&\n               <SuggestionsList suggestions={suggestions} onSuggestClick={this.setSelectedLocation} />\n            }\n         </div>\n      );\n   }\n}\n\n\n\nconst mapStateToProps = state => {\n   return {\n      suggestions: state.locationReducer.locationSuggests\n   }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n   return {\n      fetchLocationSuggests: (term) => dispatch(fetchLocationSuggestsAction(term)),\n      setSelectedLocation: (location) => dispatch(setSelectedLocationAction(location)) \n   }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LocationSearch);","function getDayInWeekByDate(date) {\n   const days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n   const dayIdx = new Date(date).getDay()\n   return days[dayIdx]\n}\n\nfunction getFormattedHour(dateStr) {\n   const localOffset = new Date(Date.now()).getTimezoneOffset() * 60000\n   const utcTimestamp = Date.now() + localOffset\n   const cityOffset = +(dateStr.slice(19,22)) * 60000 * 60\n\n   const date = new Date(utcTimestamp + cityOffset)\n   const hour = date.getHours() < 10 ? '0' + date.getHours() : date.getHours()\n   const minutes = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes()\n   return  hour +':'+ minutes\n}\n\n\nexport default {\n   getDayInWeekByDate,\n   getFormattedHour\n}","import React from 'react';\nimport './style.scss'\n// store\nimport { connect } from 'react-redux'\n//services\nimport WeatherService from '../../../../services/WeatherService'\nimport UtilService from '../../../../services/UtilService'\n\nconst DayForecast = ({ dayForecast, temperatureUnit }) => {\n   const dayInWeek = UtilService.getDayInWeekByDate(dayForecast.Date)\n\n   const celsiusDegrees = dayForecast.Temperature.Minimum.Value\n   const temperature = temperatureUnit === 'C' ?\n      celsiusDegrees + ' ° C' :\n      WeatherService.convertCelsiusToFahrenheit(celsiusDegrees) + ' ° F'\n\n   const weatherIconSrc = WeatherService.getWeatherIconSrc(dayForecast.Day.Icon)\n   return (\n      <li className=\"day-forecast-cmp floating-card\">\n         <span className=\"day\"> {dayInWeek} </span>\n\n         <div className=\"icon-temperature-container\">\n            <img src={weatherIconSrc} />\n            <span> {temperature} </span>\n         </div>\n      </li>\n   );\n}\n\nconst mapStateToProps = (state) => {\n   return {\n      temperatureUnit: state.weatherReducer.unit\n   }\n}\n\nexport default connect(mapStateToProps)(DayForecast);","import React from 'react';\nimport './style.scss'\nimport DayForecast from '../DayForecast/DayForecast';\nconst WeekForecast = ({ weekForecast }) => {\n   let weekForecastToDisplay = weekForecast.map(dayForecast => <DayForecast key={dayForecast.EpochDate} dayForecast={dayForecast} />)\n\n   return (\n      <ul className=\"week-forecast-cmp responsive-grid\">\n         {weekForecastToDisplay}\n      </ul>\n   );\n}\nexport default WeekForecast;","import React from 'react';\nimport './style.scss'\nconst ToggleHeart = ({isChecked, onClick}) => {\n   const styleObj = {\n      color: isChecked? 'tomato' : '#ccc'\n   } \n   return (\n      <span className=\"toggle-heart-cmp active\" style={styleObj} onClick={onClick}>\n         <i className=\"fas fa-heart\"></i>\n      </span>\n   );\n}\nexport default ToggleHeart;","import React, { Component } from 'react';\nimport './style.scss'\n//store\nimport { connect } from 'react-redux'\nimport { toggleLocationFromFavoritesAction } from '../../store/actions/locationActions'\n//cmps\nimport WeekForecast from './components/WeekForecast/WeekForecast';\nimport ToggleHeart from '../../components/util/ToggleHeart/ToggleHeart';\n//services\nimport WeatherService from '../../services/WeatherService'\nimport UtilService from '../../services/UtilService'\n\nclass LocationDetails extends Component {\n   state = {\n      currentWeather: 'FETCHING',\n      weekForecast: []\n   }\n\n\n   //--------------------------------- FIX\n   componentDidMount() {\n      this.fetchCurrentWeather()\n      this.fetchWeekForecast()\n   }\n\n   componentDidUpdate(prevProps, prevState) {\n      if (prevState && prevProps.selectedLocation !== this.props.selectedLocation) { // our selected location updated, fetch weather info\n         this.fetchCurrentWeather()\n         this.fetchWeekForecast()\n      }\n   }\n\n   //----------------------------------\n\n   fetchCurrentWeather = async () => {\n      const locationKey = this.props.selectedLocation.Key\n      try {\n         const currentWeather = await WeatherService.getLocationCurrentWeatherByKey(locationKey)\n         this.setState({ currentWeather })\n      } catch (err) {\n         this.setState({ currentWeather: 'ERROR' })\n      }\n\n\n   }\n\n   fetchWeekForecast = async () => {\n      const locationKey = this.props.selectedLocation.Key\n      let weekForecast = await WeatherService.getLocationweekForecastByKey(locationKey)\n      this.setState({ weekForecast })\n   }\n\n   toggleLocationFromFavorites = () => {\n      this.props.toggleLocationFromFavorites(this.props.selectedLocation)\n   }\n\n   render() {\n      const { selectedLocation, favorites, temperatureUnit } = this.props\n      const { currentWeather, weekForecast } = this.state\n\n      const locationName = selectedLocation.LocalizedName\n      const isOnFavorites = favorites.find(location => location.Key === selectedLocation.Key)\n\n      let temperature, weatherText, weatherIconSrc, hour, partOfDay, timeContainerStyle, windSpeed\n      if (currentWeather === 'FETCHING') {\n         temperature = 'Loading..'\n         weatherText = 'Loading..'\n         weatherIconSrc = 'https://svgshare.com/i/GVB.svg'\n      } else if (currentWeather === 'ERROR') {\n         weatherIconSrc = 'https://svgshare.com/i/GV2.svg'\n         weatherText = 'Please try later!'\n      } else {\n         temperature = temperatureUnit === 'C' ?\n            currentWeather.Temperature.Metric.Value + ' ° C' :\n            currentWeather.Temperature.Imperial.Value + ' ° F'\n         weatherText = currentWeather.WeatherText\n         weatherIconSrc = WeatherService.getWeatherIconSrc(currentWeather.WeatherIcon)\n         hour = UtilService.getFormattedHour(currentWeather.LocalObservationDateTime)\n         partOfDay = currentWeather.IsDayTime ? 'Day' : 'Night'\n         timeContainerStyle = { backgroundColor: currentWeather.IsDayTime ? 'lightblue' : '#214c6d' }\n         windSpeed = currentWeather.Wind.Speed.Metric.Value + 'Km/h'\n      }\n\n\n      return (\n         <div className=\"location-details-cmp\">\n\n            <div className=\"top content floating-card\">\n               <div className=\"name-temperature-container\">\n                  <h2>{locationName}</h2>\n                  <h3 className=\"temperature\"> {temperature} </h3>\n               </div>\n\n               <div className=\"weather-icon-text\">\n                  <img src={weatherIconSrc} />\n                  {weatherText}\n               </div>\n\n\n               <ToggleHeart onClick={this.toggleLocationFromFavorites} isChecked={isOnFavorites} />\n            </div>\n\n\n            <div className=\"test-1\">\n               <div className=\"floating-card location-time-container\" style={timeContainerStyle}>\n                  {hour &&\n                     <h3>{ hour} | {partOfDay}</h3>\n                  }\n               </div>\n\n               <div className=\"floating-card wind\">\n                  {windSpeed &&\n                     <>\n                        <img src='https://svgshare.com/i/GW2.svg' />\n                        <h3>Wind</h3>\n                        <span>{windSpeed}</span>\n                     </>\n                  }\n               </div>\n            </div>\n\n            <WeekForecast weekForecast={weekForecast} />\n         </div>\n      );\n   }\n}\n\nconst mapStateToProps = (state) => {\n   return {\n      selectedLocation: state.locationReducer.selectedLocation,\n      favorites: state.locationReducer.favorites,\n      temperatureUnit: state.weatherReducer.unit\n   }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n   return {\n      toggleLocationFromFavorites: (location) => dispatch(toggleLocationFromFavoritesAction(location)),\n   }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LocationDetails);\n\n","import React from 'react';\nimport './style.scss'\nimport LocationSearch from '../../containers/LocationSearch/LocationSearch';\nimport LocationDetails from '../../containers/LocationDetails/LocationDetails';\n\nconst HomePage = () => {\n   return (\n      <div className=\"home-page container content\">\n         <LocationSearch />\n         <LocationDetails />\n      </div>\n   );\n}\nexport default HomePage;","import React, { Component } from 'react';\nimport './style.scss'\n//store\nimport {connect} from 'react-redux'\n//services\nimport WeatherService from '../../../../services/WeatherService'\n\n\nclass LocationPreview extends Component {\n   state = {\n      currentWeather: null\n   }\n\n   componentDidMount() {\n      this.fetchCurrentWeather()\n   }\n\n   fetchCurrentWeather = async () => {\n      const locationKey = this.props.location.Key\n      const currentWeather = await WeatherService.getLocationCurrentWeatherByKey(locationKey)\n      this.setState({ currentWeather })\n   }\n\n   handleClick = () => {\n      const { location } = this.props\n      this.props.onLocationClick(location)\n   }\n\n   render() {\n      const { location , temperatureUnit} = this.props\n      const { currentWeather } = this.state\n     \n      let weatherIconSrc, temperature\n      if (currentWeather) { //FIX loading/error\n         temperature = temperatureUnit === 'C' ?\n            currentWeather.Temperature.Metric.Value + ' ° C' :\n            currentWeather.Temperature.Imperial.Value + ' ° F'\n         weatherIconSrc = WeatherService.getWeatherIconSrc(currentWeather.WeatherIcon)\n      }\n      return (\n         <li className=\"location-preview-cmp floating-card\" onClick={this.handleClick}>\n            <span className=\"location-name\">\n               {location.LocalizedName}\n            </span>\n\n            <div className=\"icon-temperature-container\">\n               <img src={weatherIconSrc} />\n               <span> {temperature} </span>\n            </div>\n\n         </li>\n      );\n   }\n}\n\nconst mapStateToProps = (state) => {\n   return {\n      temperatureUnit: state.weatherReducer.unit\n   }\n}\n\nexport default connect(mapStateToProps)(LocationPreview);\n\n","import React from 'react';\nimport './style.scss'\nimport LocationPreview from '../LocationPreview/LocationPreview';\n\nconst LocationList = ({ locations, onLocationClick }) => {\n   const locationListToDisplay = locations.length ?\n      locations.map(location => <LocationPreview\n         key={location.Key} location={location}\n         onLocationClick={onLocationClick}\n      />) :\n      'No favorites yet..'\n\n   return (\n      <ul className=\"location-list-cmp responsive-grid\">\n         {locationListToDisplay}\n      </ul>\n   );\n}\nexport default LocationList;","import React, { Component } from 'react';\nimport './style.scss'\n//router\nimport { withRouter } from 'react-router-dom'\n//store\nimport { connect } from 'react-redux'\nimport { setSelectedLocationAction } from '../../store/actions/locationActions'\n//cmps\nimport LocationList from './components/LocationList/LocationList';\n\n\nclass FavoritesContainer extends Component {\n\n\n   handleLocationClick = (location) => {\n      this.props.setSelectedLocation(location)\n      this.props.history.push('/')\n   }\n\n   render() {\n      const favoriteLocationsToDisplay = this.props.favorites ?\n         <LocationList locations={this.props.favorites} onLocationClick={this.handleLocationClick} /> :\n         'No locations..'\n\n      return (\n         <>\n            {favoriteLocationsToDisplay}\n         </>\n      );\n   }\n}\n\nconst mapStateToProps = (state) => {\n   return {\n      favorites: state.locationReducer.favorites\n   }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n   return {\n      setSelectedLocation: (locationDetails) => dispatch(setSelectedLocationAction(locationDetails))\n   }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(FavoritesContainer));\n\n","import React from 'react';\nimport './style.scss' \n\nimport FavoritesContainer from '../../containers/FavoritesContainer/FavoritesContainer';\nconst FavoritesPage = () => {\nreturn (\n <div className=\"favorites-page container content\">\n    <FavoritesContainer />\n </div>\n );\n}\nexport default FavoritesPage;","import React, { useEffect } from 'react';\nimport './App.scss'\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\n//store\nimport { connect } from 'react-redux'\nimport { fetchFavoriteLocationsAction } from './store/actions/locationActions'\n//cmps\nimport AppHeader from './components/layout/AppHeader/AppHeader';\nimport HomePage from './pages/HomePage/HomePage';\nimport FavoritesPage from './pages/FavoritesPage/FavoritesPage';\n\n\nfunction App(props) {\n\n  useEffect(() => {\n    props.fetchFavoriteLocations()\n  }, [])\n\n  return (\n    <Router>\n      <div className='App'>\n        <AppHeader />\n        <Switch>\n          <Route exact path='/' component={HomePage} />\n          <Route path='/favorites' component={FavoritesPage} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetchFavoriteLocations: () => dispatch(fetchFavoriteLocationsAction()),\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(App);\n","import {\n   SET_LOCATION_SUGGESTS,\n   SET_SELECTED_LOCATION,\n   SET_FAVORITE_LOCATIONS\n} from '../types'\n\n\nconst initState = {\n   locationSuggests: null, \n   selectedLocation: {\n      \"Key\": \"215854\",\n      \"LocalizedName\": \"Tel Aviv\"\n   },\n   favorites: [] \n}\n\n\nconst locationReducer = (state = initState, action) => {\n\n   switch (action.type) {\n      case SET_LOCATION_SUGGESTS:\n         return { ...state, locationSuggests: action.payload }\n      case SET_SELECTED_LOCATION:\n         return { ...state, selectedLocation: action.payload }\n      case SET_FAVORITE_LOCATIONS:\n         return { ...state, favorites: action.payload }\n      default:\n         return state\n   }\n}\n\nexport default locationReducer","import {\n   TOGGLE_TEMPERATURE_UNIT\n} from '../types'\n\n\nconst initState = {\n   unit: 'C'\n}\n\nconst weatherReducer = (state = initState, action) => {\n   switch (action.type) {\n      case TOGGLE_TEMPERATURE_UNIT:\n         const unit = state.unit === 'C' ? 'F' : 'C'\n         return { ...state, unit }\n      default:\n         return state\n   }\n}\n\nexport default weatherReducer\n","import { combineReducers } from 'redux'\nimport locationReducer from './locationReducer'\nimport weatherReducer from './weatherReducer'\n\nlet rootReducer = combineReducers({\n   locationReducer,\n   weatherReducer\n})\n\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.scss';\nimport App from './App';\n//store\nimport { createStore, applyMiddleware, subscribe } from 'redux'\nimport { Provider } from 'react-redux'\nimport rootReducer from './store/reducers/rootReducer'\nimport thunk from 'redux-thunk'\n\nconst store = createStore(rootReducer, applyMiddleware(thunk))\n\nstore.subscribe(() => {\n   // console.log('new state', store.getState())\n})\n\nReactDOM.render(\n   <Provider store={store}>\n      <App />\n   </Provider>\n   , document.getElementById('root'));\n\n"],"sourceRoot":""}